#ifndef LANE_FINDING_ADVANCED_CPP_CALIBRATOR_H
#define LANE_FINDING_ADVANCED_CPP_CALIBRATOR_H

#include <iostream>
#include <vector>

#include "opencv2/imgproc.hpp"
#include "opencv2/calib3d.hpp"
#include "display.h"

/// Calibrator abstract class
/// Example:
///     ConcreteCalibrator calib;
///     // Calibrate for the first time or recalibrate
///     calib.input_calib_images(/*std::vector<cv::Mat>*/ calib_images);
///     calib.output_xml(xml_file);
///     // Otherwise, just read in calibrated values from the xml file
///     calib.input_xml(xml_file);
///     // Usage
///     undistorted_img = calib.undistort(/*cv::Mat*/ distorted_image);
class Calibrator {
public:
    Calibrator() = default;
    ~Calibrator() = default;

    virtual void read_calib_images(const std::vector<cv::Mat>& images) = 0;

    /// Load K and D from an xml file, generated by the output_xml() function
    void write_xml(const std::string& xml_file) const;

    /// Save K and D in an xml file
    void read_xml(const std::string& xml_file);

    cv::Mat undistort(const cv::Mat& image) const;

protected:
    cv::Mat _K;  // camera matrix
    cv::Mat _D;  // distortion coefficient matrix
};

class ChessboardCalibrator : public Calibrator {
public:
    void read_calib_images(const std::vector<cv::Mat>& images) override;
};

#endif //LANE_FINDING_ADVANCED_CPP_CALIBRATOR_H
